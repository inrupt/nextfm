# nginx.conf
user nginx;
worker_processes auto;
error_log /dev/stderr notice;
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /dev/stdout combined;

    # Temp paths
    client_body_temp_path /tmp/client_temp;
    proxy_temp_path /tmp/proxy_temp;
    fastcgi_temp_path /tmp/fastcgi_temp;
    uwsgi_temp_path /tmp/uwsgi_temp;
    scgi_temp_path /tmp/scgi_temp;

    server {
        listen 8080;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;

        # Security headers - optimized for security scan compliance
        # HSTS - Strict Transport Security (exactly as recommended)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Content Security Policy - comprehensive protection against XSS
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com data:; img-src 'self' data: blob:; connect-src 'self' https://*.inrupt.com https://storage.inrupt.com https://ap.inrupt.com/; frame-src 'none'; object-src 'none'; base-uri 'self'; form-action 'self';" always;

        # X-Frame-Options - clickjacking protection (exactly as recommended)
        add_header X-Frame-Options "SAMEORIGIN" always;

        # X-Content-Type-Options - MIME-sniffing protection (exactly as recommended)
        add_header X-Content-Type-Options "nosniff" always;

        # Referrer Policy - control referrer information
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Permissions Policy - control browser features and APIs
        add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), gyroscope=(), magnetometer=(), payment=(), usb=(), interest-cohort=()" always;

        # Additional security headers
        add_header X-XSS-Protection "1; mode=block" always;

        # CORS configuration
        add_header Access-Control-Allow-Origin '*' always;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS, PUT, DELETE' always;
        add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;

        # Handle preflight OPTIONS requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin '*';
            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS, PUT, DELETE';
            add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type 'text/plain; charset=utf-8';
            add_header Content-Length 0;
            return 204;
        }

        # Main app location
        location / {
            try_files $uri $uri/ /index.html;

            # Disable caching for HTML files
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            add_header Pragma "no-cache" always;
            add_header Expires "0" always;
        }

        # Static files with caching
        location /static/ {
            expires 1y;
            add_header Cache-Control "public, no-transform" always;
        }

        # Media files with caching
        location ~* \.(jpg|jpeg|png|gif|ico|webp|svg)$ {
            expires 1y;
            add_header Cache-Control "public, no-transform" always;
        }

        # JavaScript and CSS files with caching
        location ~* \.(js|css)$ {
            expires 1y;
            add_header Cache-Control "public, no-transform" always;
        }

        # Health check endpoint
        location /health {
            access_log off;
            add_header Content-Type text/plain;
            return 200 'healthy\n';
        }

        # Error page handling
        error_page 404 /index.html;
        error_page 500 502 503 504 /50x.html;

        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
}
